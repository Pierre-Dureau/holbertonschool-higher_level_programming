The ``101-lazy_matrix_mul`` module
======================

Using ``lazy_matrix_mul``
-------------------

>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Now use it:

>>> lazy_matrix_mul([[1, 2], [3, 4], [5, 6]], [[1, 2, 5], [3, 4, 6]])
array([[ 7, 10, 17],
       [15, 22, 39],
       [23, 34, 61]])

>>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
array([[13, 16]])

>>> lazy_matrix_mul()
Traceback (most recent call last):
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> lazy_matrix_mul([1, 2])
Traceback (most recent call last):
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

>>> lazy_matrix_mul("Holberton", [1, 2])
ufunc 'multiply' did not contain a loop with signature matching types (dtype('<U9'), dtype('<U1')) -> None

>>> lazy_matrix_mul([1, 2], "Holberton")
ufunc 'multiply' did not contain a loop with signature matching types (dtype('<U1'), dtype('<U9')) -> None

>>> lazy_matrix_mul([1, 2], [[3, 4], [5, 6]])
array([13, 16])

>>> lazy_matrix_mul([[1, 2], [3, 4]], [5, 6])
array([17, 39])

>>> lazy_matrix_mul([[]], [[1, 2]])
shapes (1,0) and (1,2) not aligned: 0 (dim 1) != 1 (dim 0)

>>> lazy_matrix_mul([[3, 4]], [[]])
shapes (1,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

>>> lazy_matrix_mul([[1, 2]], [[3, "4"], [5, 6]])
data type must provide an itemsize

>>> lazy_matrix_mul([[1, "2"]], [[3, 4], [5, 6]])
data type must provide an itemsize

>>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6], [7, 8]])
shapes (1,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)
